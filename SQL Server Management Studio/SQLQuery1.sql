 /*use nothing;
CREATE TABLE CUSTOMER (
CUSTOMER_ID INT NOT NULL,
FIRST_NAME VARCHAR(20) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
EMAIL VARCHAR(50),
AGE INT,
REGISTRATION_DATE DATE,
IS_ACTIVE BIT
PRIMARY KEY(CUSTOMER_ID)
);
ALTER TABLE CUSTOMER 
ALTER COLUMN AGE INT NOT NULL;
ALTER TABLE CUSTOMER 
ALTER COLUMN REGISTRATION_DATE DATETIME;
SELECT *FROM CUSTOMER;
INSERT INTO CUSTOMER (CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,AGE,REGISTRATION_DATE,IS_ACTIVE)
VALUES
(01,'JOHN','DOE','JOHN.DOE@EXAMPLE.COM',30,'2023-01-15',1),
(02,'JANE','SMITH','JANE.SIMTH@EXAMPLE.COM',25,'2023-02-20',1),
(03,'ALICE','JOHNSON','ALICE.JOHNSON@EXAMPLE.COM',35,'2023-03-10',0),
(04,'BOB','BROWN','BOB.BROWN@EXAMPLE.COM',40,'2022-12-20',1),
(05,'CHARLINE','DAVIS','CHARLINE.DAVIS@EXAMPLE.COM',28,'2023-04-05',0);
INSERT INTO CUSTOMER (CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,AGE,REGISTRATION_DATE,IS_ACTIVE)
VALUES
(06,'STEVE','SMITH','STEVE.SMITH@EXAMPLE.COM',36,NULL,0);
SELECT * FROM CUSTOMER;
SELECT FIRST_NAME,LAST_NAME,AGE,IS_ACTIVE FROM CUSTOMER
WHERE AGE>30;
SELECT TOP 1 FIRST_NAME,LAST_NAME,AGE,IS_ACTIVE FROM CUSTOMER
WHERE AGE>30;
SELECT FIRST_NAME,LAST_NAME,AGE,IS_ACTIVE FROM CUSTOMER 
WHERE FIRST_NAME LIKE 'J%';
UPDATE CUSTOMER 
SET AGE=50,IS_ACTIVE=0
WHERE CUSTOMER_ID=1;
UPDATE CUSTOMER 
SET AGE=50,IS_ACTIVE=0
WHERE FIRST_NAME='JOHN';
SELECT * FROM CUSTOMER;
SELECT FIRST_NAME FROM CUSTOMER
WHERE REGISTRATION_DATE IS NULL;
SELECT FIRST_NAME,AGE FROM CUSTOMER
WHERE AGE>25 AND IS_ACTIVE=1;
SELECT FIRST_NAME,AGE FROM CUSTOMER
ORDER BY AGE DESC;
SELECT * FROM CUSTOMER;
CREATE TABLE Sales (     SalesID INT PRIMARY KEY,     SalesPerson VARCHAR(50),     SaleAmount DECIMAL(10, 2),     SaleDate DATE); INSERT INTO Sales (SalesID, SalesPerson, SaleAmount, SaleDate) VALUES(1, 'Alice', 150.00, '2024-01-15'), (2, 'Bob', 200.00, '2024-01-16'), (3, 'Alice', 300.00, '2024-02-15'), (4, 'Bob', 250.00, '2024-02-16'), (5, 'Charlie', 400.00, '2024-01-20'), (6, 'Charlie', 100.00, '2024-02-20');
SELECT * FROM SALES;
SELECT SALESPERSON,SUM(SALEAMOUNT) AS TOTAL_AMOUNT FROM SALES
GROUP BY SalesPerson;
CREATE TABLE Orders (     OrderID INTEGER PRIMARY KEY,     CustomerID INTEGER,     OrderDate DATE,     OrderAmount DECIMAL(10, 2),     OrderStatus VARCHAR(20) );  INSERT INTO Orders (OrderID, CustomerID, OrderDate, OrderAmount, OrderStatus) VALUES(1, 1001, '2024-01-15', 250.00, 'Completed'), (2, 1002, '2024-01-20', 150.00, 'Pending'), (3, 1001, '2024-02-05', 300.00, 'Completed'), (4, 1003, '2024-02-10', 200.00, 'Completed'), (5, 1001, '2024-03-15', 100.00, 'Cancelled'), (6, 1004, '2024-03-20', 400.00, 'Completed'), (7, 1002, '2024-04-05', 500.00, 'Pending'), (8, 1003, '2024-04-15', 350.00, 'Completed'), (9, 1001, '2024-05-10', 150.00, 'Completed'), (10, 1004, '2024-05-20', 220.00, 'Cancelled'), (11, 1005, '2024-06-01', 100.00, 'Pending'), (12, 1002, '2024-06-10', 600.00, 'Completed'), (13, 1003, '2024-06-15', 150.00, 'Completed'), (14, 1001, '2024-07-01', 250.00, 'Completed'), (15, 1004, '2024-07-15', 350.00, 'Completed'), (16, 1005, '2024-08-01', 300.00, 'Pending'), (17, 1001, '2024-08-15', 450.00, 'Completed'), (18, 1002, '2024-09-01', 200.00, 'Cancelled'), (19, 1003, '2024-09-15', 250.00, 'Completed'), (20, 1004, '2024-10-01', 150.00, 'Completed');
CREATE TABLE Returns (     ReturnID INTEGER PRIMARY KEY,     OrderID INTEGER,     ReturnDate DATE,     ReturnAmount DECIMAL(10, 2),     ReturnStatus VARCHAR(20) ); INSERT INTO Returns (ReturnID, OrderID, ReturnDate, ReturnAmount, ReturnStatus) VALUES(1, 1, '2024-01-16', 250.00, 'Approved'), (2, 2, '2024-01-25', 150.00, 'Pending'), (3, 5, '2024-03-16', 100.00, 'Approved'), (4, 6, '2024-03-25', 400.00, 'Approved'), (5, 10, '2024-05-21', 220.00, 'Pending'), (6, 15, '2024-07-16', 350.00, 'Approved');
SELECT * FROM ORDERS;
SELECT ORDERSTATUS,COUNT(ORDERSTATUS) AS COUNT_OF_ORDERSTATUS FROM ORDERS
GROUP BY OrderStatus;
SELECT ORDERSTATUS,COUNT(ORDERSTATUS) AS COUNT_OF_ORDERSTATUS FROM ORDERS
GROUP BY OrderStatus
HAVING COUNT(OrderStatus) > 9;
SELECT * FROM RETURNS;
SELECT *,CASE 
WHEN (RETURNAMOUNT>100) AND (RETURNAMOUNT<200) THEN ('POOR')
WHEN (RETURNAMOUNT>200) AND (RETURNAMOUNT<300) THEN ('BETTER')
WHEN (RETURNAMOUNT>300) THEN ('GOOD')
ELSE ('NOTHING')
END AS RETURN_RATING FROM RETURNS;
SELECT * FROM ORDERS;
SELECT * FROM RETURNS;
SELECT ORDERID FROM ORDERS 
INTERSECT
SELECT ORDERID FROM RETURNS
WHERE ReturnStatus LIKE 'APPROVED';
SELECT * FROM CUSTOMER;
SELECT * FROM SALES;
SELECT * FROM ORDERS;
SELECT * FROM RETURNS;*/
USE NOTHING;
CREATE TABLE CUSTOMERS (
ID INT NOT NULL PRIMARY KEY,
NAME VARCHAR(35) NOT NULL,
AGE INT NOT NULL,
ADDRESS VARCHAR(25),
SALARY DECIMAL(10,2)
);
SELECT * FROM CUSTOMERS;
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES
(01,'RAMESH',32,'AHMEDABAD',2000),
(02,'KHILAN',25,'DELHI',1500.00),
(03,'KAUSHIK',23,'KOTA',2000),
(04,'CHAITALI',25,'MUMBAI',6500),
(05,'HARDIK',27,'BHOPAL',8500),
(06,'KOMAL',22,'MO',4500),
(07,'MUFFY',24,'INDORE',10000.00);
SELECT * FROM CUSTOMERS;
SELECT * FROM CUSTOMERS 
WHERE SALARY > 5000;
SELECT * FROM CUSTOMERS 
WHERE SALARY = 2000;
SELECT * FROM CUSTOMERS 
WHERE SALARY <> 2000;
SELECT * FROM CUSTOMERS
WHERE SALARY >= 6500;
SELECT * FROM CUSTOMERS;
SELECT * FROM CUSTOMERS
WHERE AGE >= 25 AND SALARY >= 6500;
SELECT * FROM CUSTOMERS 
WHERE AGE >= 25 OR SALARY >= 6500;
SELECT * FROM CUSTOMERS
WHERE AGE IS NOT NULL;
SELECT * FROM CUSTOMERS
WHERE NAME LIKE 'KO%';
SELECT * FROM CUSTOMERS
WHERE AGE IN (25,27);
SELECT * FROM CUSTOMERS
WHERE AGE BETWEEN 25 AND 27;
SELECT AGE FROM CUSTOMERS 
WHERE EXISTS (SELECT AGE FROM CUSTOMERS
WHERE SALARY > 9000);
SELECT AGE FROM CUSTOMERS;
SELECT * FROM CUSTOMERS
WHERE AGE > ANY (SELECT AGE FROM CUSTOMERS 
WHERE SALARY > 6500);
SELECT * FROM CUSTOMERS;
SELECT * FROM CUSTOMERS
WHERE AGE > ALL (SELECT AGE FROM CUSTOMERS 
WHERE SALARY > 6500);
USE NOTHING;
SELECT * FROM CUSTOMERS;
SELECT NAME,AGE FROM CUSTOMERS
WHERE AGE > ALL (SELECT AGE FROM CUSTOMERS WHERE SALARY > 5000);
SELECT * FROM CUSTOMERS
WHERE AGE > ANY (SELECT AGE FROM CUSTOMERS WHERE SALARY > 5000);

SELECT * FROM CUSTOMERS;
SELECT * FROM CUSTOMERS 
WHERE SALARY = 10000;
SELECT (15*8) AS MULTIPLY;
SELECT COUNT(*) AS VALUE FROM CUSTOMERS;
SELECT CURRENT_TIMESTAMP AS TIME_NOW;
SELECT GETDATE();
CREATE DATABASE VALUE;
SHOW DATABASES;

CREATE TABLE SALARY AS	
SELECT ID,NAME,SALARY FROM CUSTOMERS;

CREATE TABLE ORDERSS(
ORDER_ID INT NOT NULL,
CUSTOMER_ID INT REFERENCES CUSTOMERS(ID) NOT NULL,
DATE DATETIME,
AMOUNT DECIMAL(6,3)
PRIMARY KEY(ORDER_ID)
);
SELECT * FROM ORDERSS;
SELECT * FROM Orders;
SELECT * FROM CUSTOMERS
SELECT * FROM ORDERSS
INSERT INTO ORDERSS(ORDER_ID,CUSTOMER_ID,DATE,AMOUNT)
VALUES
(101,06,null,300.600),
(102,03,'2024/06/22 22:05:55',567.89),
(107,05,'2024/12/27 03:08:26',250),
(108,07,'2014/10/09 09:23:56',08),
(109,07,'2004/11/03 18:45:55',999);
DELETE FROM ORDERSS
WHERE ORDER_ID IN (101,102);

SELECT GETDATE();
SELECT CURRENT_TIMESTAMP;

UPDATE ORDERSS
SET DATE = '2004/11/03 18:45:55'
WHERE ORDER_ID = 109;

SELECT * FROM CUSTOMERS
SELECT * FROM ORDERSS;
SELECT ID,NAME,SALARY FROM CUSTOMERS;
SELECT * FROM CUSTOMERS;
SELECT ID,NAME,SALARY FROM CUSTOMERS
WHERE SALARY > 2000;
SELECT ID,NAME,SALARY FROM CUSTOMERS
WHERE NAME = 'HARDIK';
SELECT ID,SALARY,NAME FROM CUSTOMERS
WHERE SALARY > 2000 AND AGE < 25;
SELECT ID,NAME,SALARY FROM CUSTOMERS
WHERE SALARY > 2000 OR AGE < 25;
UPDATE CUSTOMERS
SET ADDRESS ='PUNE'
WHERE ID = 6;
SELECT * FROM CUSTOMERS;
DELETE FROM ORDERSS
WHERE ORDER_ID = 101;
DELETE FROM CUSTOMERS
WHERE ID=6;
SELECT * FROM CUSTOMERS
SELECT * FROM ORDERSS

SELECT * FROM CUSTOMERS
WHERE SALARY LIKE '200%'
SELECT TOP 3 * FROM CUSTOMERS
SELECT * FROM CUSTOMERS

USE NOTHING;
DELETE FROM CUSTOMERS
WHERE ID=07;
DELETE FROM ORDERSS
WHERE ORDER_ID=107;
SELECT * FROM ORDERSS;
SELECT COUNT(ORDER_ID) AS NUMBER_OF_ROWS FROM ORDERSS;
INSERT INTO ORDERSS(ORDER_ID,CUSTOMER_ID,DATE,AMOUNT)
VALUES
(107,2,'07/07/2029 07:07:07',777.777);
SELECT * FROM ORDERSS;
SELECT * FROM CUSTOMERS;
SELECT * FROM CUSTOMERS
WHERE SALARY LIKE'200%';
SELECT TOP 3 * FROM CUSTOMERS;
SELECT TOP 3 * FROM CUSTOMERS
ORDER BY NAME DESC,SALARY DESC;
SELECT * FROM CUSTOMERS
ORDER BY AGE,SALARY DESC;
SELECT * FROM CUSTOMERS
ORDER BY NAME,SALARY;
SELECT * FROM CUSTOMERS
ORDER BY NAME DESC;
SELECT * FROM CUSTOMERS
WHERE ID<=5
ORDER BY SALARY DESC;
SELECT * FROM CUSTOMERS;
SELECT NAME,SUM(SALARY) FROM CUSTOMERS
GROUP BY NAME;
SELECT * FROM CUSTOMERS;
UPDATE CUSTOMERS
SET NAME = 'KAUSHIK'
WHERE ID=4;
SELECT * FROM CUSTOMERS;
SELECT NAME,SUM(SALARY) AS SUM_OF_SALARY FROM CUSTOMERS
GROUP BY NAME;
SELECT DISTINCT NAME FROM CUSTOMERS;
SELECT SALARY FROM CUSTOMERS
ORDER BY SALARY;
SELECT DISTINCT SALARY FROM CUSTOMERS
ORDER BY SALARY;
SELECT * FROM CUSTOMERS
ORDER BY NAME DESC,SALARY;
UPDATE CUSTOMERS
SET NAME='CHAITALI'
WHERE ID=04;
SELECT * FROM CUSTOMERS
SELECT * FROM CUSTOMERS
ORDER BY NAME,SALARY;
SELECT * FROM CUSTOMERS
ORDER BY NAME DESC;
SELECT * FROM CUSTOMERS
ORDER BY(CASE ADDRESS 
WHEN 'MUMBAI' THEN 01
WHEN 'MO' THEN 02
WHEN 'AHMEDABAD' THEN 03
WHEN 'BHOPAL' THEN 04
WHEN 'KOTA' THEN 05
WHEN 'DELHI' THEN 06
ELSE 100 END)
ASC;
CREATE INDEX IDX_AGE
ON CUSTOMERS(AGE);
SELECT * FROM CUSTOMERS
WHERE AGE>=24;
ALTER TABLE CUSTOMERS
DROP INDEX IDX_AGE;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERSS;
SELECT DISTINCT NAME,AGE,SALARY,AMOUNT
FROM CUSTOMERS,ORDERSS
WHERE CUSTOMERS.ID=ORDERSS.CUSTOMER_ID
ORDER BY NAME;
SELECT ID,NAME,AGE,AMOUNT
FROM CUSTOMERS,ORDERSS
WHERE CUSTOMERS.ID=ORDERSS.CUSTOMER_ID;
USE NOTHING
SELECT * FROM CUSTOMERS
SELECT * FROM ORDERSS
SELECT ID,NAME,AGE,SALARY,ORDER_ID,AMOUNT
FROM CUSTOMERS,ORDERSS
WHERE CUSTOMERS.ID=ORDERSS.CUSTOMER_ID
SELECT ID,NAME,AGE,AMOUNT
FROM CUSTOMERS AS A INNER JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID;
SELECT ID,NAME,AGE,AMOUNT 
FROM ORDERSS AS A INNER JOIN CUSTOMERS AS B
ON A.CUSTOMER_ID=B.ID;
SELECT * FROM CUSTOMERS
SELECT * FROM ORDERSS
SELECT ID,AGE,DATE,AMOUNT
FROM CUSTOMERS AS A LEFT JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID;
SELECT *
FROM CUSTOMERS AS A RIGHT JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID;
SELECT ID,NAME,ADDRESS,AMOUNT
FROM CUSTOMERS AS A FULL JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID;
SELECT ID,NAME,ADDRESS,AMOUNT
FROM CUSTOMERS AS A LEFT JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID
UNION ALL
SELECT ID,NAME,ADDRESS,AMOUNT
FROM CUSTOMERS AS D RIGHT JOIN ORDERSS AS C
ON D.ID=C.CUSTOMER_ID;
SELECT * FROM CUSTOMERS
SELECT A.ID,B.NAME,A.SALARY
FROM CUSTOMERS AS A, CUSTOMERS AS B
WHERE A.SALARY < B.SALARY;
SELECT A.ID,A.NAME,A.ADDRESS,A.SALARY
FROM CUSTOMERS  AS A,CUSTOMERS AS B
WHERE A.SALARY > B.SALARY
SELECT * 
FROM CUSTOMERS AS A LEFT JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID;
SELECT * 
FROM CUSTOMERS AS A RIGHT JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID;
SELECT A.ID,A.NAME,A.SALARY,B.AMOUNT
FROM CUSTOMERS AS A,ORDERSS AS B
SELECT * FROM ORDERSS
SELECT ID,NAME,SALARY,AMOUNT,ORDER_ID
FROM ORDERSS,CUSTOMERS;
SELECT * FROM CUSTOMERS
WHERE SALARY > 5000
UNION 
SELECT * FROM CUSTOMERS
WHERE AGE > 26;
SELECT * FROM CUSTOMERS 
WHERE SALARY > 5000
UNION ALL
SELECT * FROM CUSTOMERS
WHERE AGE > 26;
SELECT * FROM CUSTOMERS
WHERE SALARY > 5000
SELECT * FROM CUSTOMERS
WHERE AGE > 26;
SELECT * FROM CUSTOMERS
WHERE SALARY > 5000
INTERSECT
SELECT * FROM CUSTOMERS
WHERE AGE > 26; 
SELECT * FROM CUSTOMERS
WHERE AGE > 25
EXCEPT 
SELECT * FROM CUSTOMERS
WHERE SALARY > 5000
UPDATE CUSTOMERS
SET SALARY = NULL
WHERE ID = 7 & 7
SELECT * FROM CUSTOMERS
WHERE SALARY IS NOT NULL;
SELECT * FROM CUSTOMERS
WHERE SALARY IS NULL;
UPDATE CUSTOMERS
SET ADDRESS='MP'
WHERE ID=06
UPDATE CUSTOMERS
SET SALARY = 4500
WHERE ID=06
UPDATE CUSTOMERS
SET SALARY = 10000
WHERE ID=07
SELECT * FROM CUSTOMERS
SELECT NAME AS NEW_NAME FROM CUSTOMERS AS CUST
WHERE AGE > 23;
SELECT NAME AS UPDATE_NAME FROM CUSTOMERS
WHERE SALARY > 3000;
SELECT ID,NAME AS NAMEEE,SALARY AS SALA FROM CUSTOMERS
USE NOTHING;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERSS;
SELECT ID AS CUST_ID2,NAME AS CUST_NAME,SALARY AS CUST_SALA FROM CUSTOMERS;
CREATE INDEX NOTH ON CUSTOMERS (ID);
CREATE INDEX CHANGE ON CUSTOMERS(NAME,SALARY);
DROP INDEX NOTH ON CUSTOMERS;
DROP INDEX CHANGE ON CUSTOMERS;
CREATE INDEX LAN ON CUSTOMERS(ID,NAME,SALARY,AGE);
DROP INDEX LAN ON CUSTOMERS;
ALTER TABLE CUSTOMERS
ADD DATE DATETIME;
SELECT * FROM CUSTOMERS
ALTER TABLE CUSTOMERS
DROP COLUMN DATE;
ALTER TABLE CUSTOMERS
ALTER COLUMN SALARY INT;
SELECT * FROM ORDERSS;
ALTER TABLE ORDERSS
ALTER COLUMN AMOUNT INT;
ALTER TABLE ORDERSS
ALTER COLUMN AMOUNT DECIMAL(6,3);
ALTER TABLE CUSTOMERS
ADD SEX CHAR(1);
SELECT * FROM CUSTOMERS;
ALTER TABLE CUSTOMERS
DROP COLUMN SEX;
TRUNCATE TABLE CUSTOMERS;
TRUNCATE TABLE ORDERSS;
SELECT * FROM ORDERSS;
CREATE VIEW NOTHEE AS
SELECT ID,NAME,AGE
FROM CUSTOMERS;
SELECT * FROM NOTHEE;
CREATE VIEW NNN AS
SELECT ID,NAME,AGE,ADDRESS,SALARY
FROM CUSTOMERS;
SELECT * FROM NNN
SELECT * FROM CUSTOMERS
UPDATE NNN
SET SALARY=90090
WHERE ID=6;
INSERT INTO NNN(ID,NAME,AGE,ADDRESS,SALARY)
VALUES
(08,'ASHWIN',36,'CHENNAI',50483)
SELECT * FROM NNN;
DELETE FROM NNN
WHERE AGE=36;
DROP VIEW NNN;
SELECT AGE FROM CUSTOMERS
GROUP BY AGE
HAVING COUNT(AGE)>=2
SELECT SUM(SALARY) AS SUM_OF_THE_SALARY FROM CUSTOMERS
WHERE AGE>=25;
BEGIN TRANSACTION
DELETE FROM CUSTOMERS
WHERE AGE=25
COMMIT;
ROLLBACK;
INSERT INTO CUSTOMERS(ID,NAME,AGE,ADDRESS,SALARY)
VALUES
(02,'KHILAN',25,'DELHI',1500.00),
(04,'CHAITALI',25,'MUMBAI',6500);
BEGIN TRANSACTION
SELECT * FROM CUSTOMERS;
ROLLBACK;
SELECT * FROM CUSTOMERS
WHERE SALARY LIKE '200%';
CREATE TABLE #TempTable (
    ID INT PRIMARY KEY,
    Name NVARCHAR(50),
    Age INT
);
SELECT * FROM #TempTable;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERSS;
CREATE TABLE #SALES (
NAME VARCHAR(56) NOT NULL,
AGE INT NOT NULL,
);
INSERT INTO #SALES(NAME,AGE)
VALUES
('ANANDH KUMAR',45),
('ANANDH KUMAR',45),
('ANANDH KUMAR',45),
('ANANDH KUMAR',45),
('ANANDH KUMAR',45);
SELECT * FROM #SALES;
UPDATE #SALES
SET NAME ='KUMAR'
SELECT * FROM CUSTOMERS;
SELECT DISTINCT * FROM CUSTOMERS
WHERE SALARY IN (SELECT SALARY FROM CUSTOMERS WHERE SALARY > 4500);
SELECT * FROM CUSTOMERS
WHERE AGE IN(SELECT A.AGE
FROM CUSTOMERS AS A LEFT JOIN ORDERSS AS B
ON A.ID=B.CUSTOMER_ID
WHERE SALARY BETWEEN 2000 AND 30000);
SELECT * FROM ORDERSS
WHERE AMOUNT IN (SELECT AMOUNT FROM ORDERSS WHERE AMOUNT > 550)
CREATE SEQUENCE my_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    NO CYCLE
    CACHE 10;
SELECT NEXT VALUE FOR my_sequence;
SELECT SALARY FROM CUSTOMERS
SELECT DISTINCT SALARY FROM CUSTOMERS
USE NOTHING;
SELECT * FROM CUSTOMERS
SELECT * FROM ORDERSS
SELECT SALARY FROM CUSTOMERS
ORDER BY SALARY
SELECT DISTINCT SALARY FROM CUSTOMERS
ORDER BY SALARY
CREATE TABLE EMPLOYEE_TABLE (
ID INT,
NAME VARCHAR(30),
WORK_DATE DATE,
DAILY_TYPING_PAGES INT
);
INSERT INTO EMPLOYEE_TABLE (ID,NAME,WORK_DATE,DAILY_TYPING_PAGES)
VALUES 
(1,'JOHN','2007-01-24',250),
(2,'RAM','2007-05-27',220),
(3,'JACK','2007-05-06',170),
(3,'JACK','2007-04-06',100),
(4,'JILL','2007-04-06',220),
(5,'ZARA','2007-06-06',300),
(5,'ZARA','2007-02-06',350);
SELECT * FROM EMPLOYEE_TABLE;
SELECT COUNT(*) AS NUMBER_OF_RECORDS FROM EMPLOYEE_TABLE;
SELECT COUNT(*) FROM EMPLOYEE_TABLE
WHERE NAME = 'ZARA'
SELECT MIN(DAILY_TYPING_PAGES) FROM EMPLOYEE_TABLE
SELECT AVG(DAILY_TYPING_PAGES) FROM EMPLOYEE_TABLE
SELECT SUM(DAILY_TYPING_PAGES) FROM EMPLOYEE_TABLE
SELECT ID,NAME,SUM(DAILY_TYPING_PAGES) FROM EMPLOYEE_TABLE
GROUP BY ID,NAME
SELECT SQRT(10000)
SELECT NAME,SQRT(DAILY_TYPING_PAGES) FROM EMPLOYEE_TABLE
GROUP BY NAME
SELECT RAND(),RAND(),RAND(1)
SELECT * FROM EMPLOYEE_TABLE 
ORDER BY RAND()
SELECT * FROM EMPLOYEE_TABLE 
ORDER BY RAND(1)
SELECT CONCAT('VEERA','MANICKAM')
SELECT CONCAT(ID,NAME) FROM EMPLOYEE_TABLE
SELECT ACOS(1)
SELECT GREATEST(1,56,897,556,452,5963,4856,7)
